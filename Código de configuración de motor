// Pines para el motor X
const int stepPinx = 5; 
const int dirPinx = 2; 
const int enPinx = 7;

// Pines para el motor Y
const int stepPiny = 4; 
const int dirPiny = 3; 
const int enPiny = 6;

// Datos del sismo (199 datos)
const int dataSize = 199;
float sismoX[dataSize]={0.017067367, -0.001540774, -0.003696842, 0.005354269, 0.017956441, 0.017404558, -0.01076973, -0.014435822, 0.025054242, 0.027067812, -0.011011433, -0.003978404, 0.014834256, 0.015246949, 0.009959678, 0.016615301, -0.007115779, -0.010316204, 0.002760953, 0.021340183, 0.008333743, -0.009541038, -0.005380061, -0.024980278, -0.010194745, 0.004941846, 0.022489697, 0.019119216, -0.01449307, 0.002254881, 0.004235523, 0.022316202, 0.025478546, -0.005212135, -0.027876251, -0.065542372, -0.054378868, -0.05157349, -0.017558896, -0.011742228, 0.003083665, 0.041424892, 0.050205954, 0.031895211, 0.080582462, 0.046979958, 0.030532588, 0.062920963, 0.035599162, -0.015706264, -0.015975946, -0.037955804, -0.052795828, -0.051917447, -0.082110472, -0.093989163, -0.0521964, -0.033117882, 0.028818829, 0.050665774, 0.066762764, 0.084049577, 0.081736424, 0.061313105, 0.02023267, -0.026554871, -0.027704619, 0.011151781, -0.022794842, 0.019732041, -0.015459412, -0.038888591, -0.037307527, -0.084231539, -0.065126938, -0.010245773, -0.021546215, 0.029836037, 0.060386691, 0.068441459, 0.134701311, 0.145539875, 0.071164113, -0.053390176, -0.065033202, -0.047441505, -0.014532425, 0.047056278, 0.031276654, -0.033287637, -0.039499855, -0.004052859, 0.092453357, 0.160695327, 0.14819142, 0.156241546, 0.185318304, 0.126851295, 0.078313788, -0.031400185, -0.077136557, -0.135755516, -0.166647962, -0.112195476, -0.141068458, -0.191482307, -0.223318424, -0.198984209, -0.191748861, -0.104680881, -0.053987359, 0.004029672, 0.003042659, -0.022264731, 0.008030972, 0.009929769, 0.029963295, 0.065772351, 0.078068189, 0.051260988, 0.07242423, 0.065651793, 0.058321218, 0.072313124, 0.085284653, 0.030640912, -0.005806879, 0.039140257, 0.064971101, 0.009174421, -0.029898756, -0.158123957, -0.191427647, -0.188868106, -0.144163633, -0.083487639, -0.00650961, -0.032549918, -0.07770039, -0.144679402, -0.152889042, -0.144528151, -0.08994995, -0.039348237, -0.048685264, -0.10806308, -0.115343934, -0.074244118, 0.072099588, 0.116552486, 0.034066694, -0.110005847, 0.004861468, 0.104284942, 0.189881833, 0.162907454, -0.124497594, -0.253600512, -0.07668511, 0.147238543, -0.040586784, -0.21500288, -0.217618947, -0.229621683, -0.173747889, 0.243675835, 0.23231809, 0.259688874, 0.158970989, 0.010385743, 0.188804608, 0.387479612, 0.382549546, 0.23310321, 0.263041604, 0.235905528, 0.156116382, 0.134064065, 0.021130088, -0.03982629, -0.122387708, -0.300936906, -0.247171775, -0.058408644, 0.092959616, 0.057344235, -0.140964956, -0.209613977, -0.15557627, 0.027588097, 0.183889233, 0.240471929, 0.198165953, 0.142166107, -0.073626561, -0.206364099, -0.241748558, -0.297198288, -0.28353469};
float sismoY[dataSize]={-0.0008721, 0.01617039, -0.01429634, -0.00353758, 0.0093487, -0.01346403, 0.00906404, -0.00011099, -0.01339318, 0.00057357, -0.00868725, -0.01536647, -0.00689265, -0.0158056, 0.00777429, 0.00435926, -0.01695785, -0.03093212, 0.03300786, 0.01680904, -0.00647143, 0.02960214, -0.004259, -0.0462916, -0.00155687, 0.00431252, 0.06522167, 0.03278081, -0.00936417, 0.03636328, -0.04098174, -0.04549108, -0.0199729, -0.05585474, -0.02923253, -0.03591646, 0.02239856, 0.01862375, 0.00237852, 0.00130672, 0.01020124, 0.02525081, 0.03269935, 0.02084684, 0.06038308, -0.00243581, -0.02985779, -0.00614713, -0.00506712, -0.01684019, -0.00172554, -0.00146397, -0.04447488, -0.0361205, 0.00637671, -0.02816896, 0.02611799, 0.01859981, -0.01632962, 0.02097766, 0.02024002, 0.00729828, -0.01906697, -0.00498835, 0.02207594, 0.00014838, -0.00169043, 0.02071665, -0.02476609, 0.01020217, -0.04622144, -0.07253894, 0.02582005, -0.02042507, -0.0011304, 0.04756015, 0.05483639, 0.10260038, 0.06122044, 0.00238028, -0.01544153, -0.06805419, -0.04407912, -0.03315509, 0.0292281, 0.02412045, -0.03583315, -0.01837962, -0.09920368, -0.08386551, 0.00054508, -0.00482599, 0.01113558, 0.00721548, -0.0079832, 0.02016706, 0.01389587, -0.06575187, -0.02231494, 0.0036036, 0.08963027, 0.08967937, -0.03285318, -0.01669086, -0.09073775, -0.01068468, -0.03181018, -0.04241632, -0.08870617, -0.07876135, -0.03177267, -0.0405534, 0.00139748, 0.03063099, 0.10554916, 0.05215405, 0.02573647, 0.10204438, 0.11071754, 0.13383457, 0.16868218, 0.05493493, -0.06720525, -0.08172299, -0.05173975, -0.06694938, -0.0863621, -0.08350341, -0.06388148, -0.08996774, -0.03033565, -0.00043522, 0.03429784, 0.03390741, 0.05611696, 0.11678265, 0.07829414, 0.03607607, 0.01025695, -0.01422035, -0.0152589, -0.04622401, -0.00558811, 0.02232531, 0.09564279, 0.09632453, 0.09762564, -0.02081817, -0.15144054, -0.19310789, 0.07630842, 0.27562782, 0.2105063, 0.04208583, -0.12637752, 0.01892848, 0.23436307, 0.11463733, 0.02656575, -0.28094471, -0.24987451, 0.13045586, 0.25238421, 0.21827064, -0.12197966, -0.38503207, -0.24414061, 0.02620596, 0.22394635, 0.19149495, -0.03434226, -0.10822843, -0.06176159, 0.06031647, 0.1070435, 0.07964497, -0.01477397, -0.11856127, -0.21522927, -0.06682075, 0.019799, -0.01602311, -0.0571024, -0.0841715, -0.06191102, 0.07849739, 0.07480884, 0.07090292, -0.02074486, 0.04918693, 0.04661462, 0.14268826, 0.21594546, 0.22218124, 0.03706905, -0.15002987, -0.0917554, 0.04683439, 0.00694456};

const int interval = (19 * 1000) / dataSize;  // Intervalo en milisegundos

void setup() {
  Serial.begin(9600);
  // Inicializar los pines del motor X
  pinMode(stepPinx, OUTPUT);
  pinMode(dirPinx, OUTPUT);
  pinMode(enPinx, OUTPUT);
  
  // Inicializar los pines del motor Y
  pinMode(stepPiny, OUTPUT);
  pinMode(dirPiny, OUTPUT);
  pinMode(enPiny, OUTPUT);

  // Habilitar los motores
  digitalWrite(enPinx, LOW);
  digitalWrite(enPiny, LOW);
}

void moveMotor(int stepPin, int dirPin, float value) {
  digitalWrite(dirPin, value > 0 ? HIGH : LOW);
  int steps = abs(value * 800); // Ajustar la escala según sea necesario
  for (int s = 0; s < steps; s++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(400); // Ajustar el tiempo para suavidad
    digitalWrite(stepPin, LOW);
    delayMicroseconds(400); // Ajustar el tiempo para suavidad
  }
}

void loop() {
  unsigned long startTime = millis();
  
  for (int i = 0; i < dataSize; i++) {
    if (millis() - startTime >= 19030) {
      break; // Salir del bucle después de 19.03 segundos
    }
    
    // Mover el motor X
    moveMotor(stepPinx, dirPinx, sismoX[i]);

    // Mover el motor Y
    moveMotor(stepPiny, dirPiny, sismoY[i]);

    // Esperar hasta el próximo intervalo
    delay(interval);
  }

  // Deshabilitar los motores después de 15 segundos
  digitalWrite(enPinx, HIGH);
  digitalWrite(enPiny, HIGH);

  while (true); // Detener el programa
}
