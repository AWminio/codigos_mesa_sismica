import pandas as pd
import numpy as np
import scipy.integrate
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt, welch
import math

# Leer los datos del archivo CSV
df = pd.read_csv("PM7.csv")  # Ajusta esta ruta a la ubicación correcta de tu archivo

# Asumimos que la primera columna es la que contiene los datos de aceleración
df_x = df.iloc[:, 0]
ug = df_x.dropna()
ug_values = ug.values

# Definir el intervalo de tiempo
dt = 0.01
n = len(ug_values)
t = np.arange(0, dt * n, dt)

# Función para aplicar un filtro pasaaltos de Butterworth
def butter_highpass(cutoff, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='high', analog=False)
    return b, a

def highpass_filter(data, cutoff, fs, order=5):
    b, a = butter_highpass(cutoff, fs, order=order)
    y = filtfilt(b, a, data)
    return y

# Eliminar la media de la señal de aceleración
ug_mean = np.mean(ug_values)
ug_values -= ug_mean

# Aplicar un filtro pasaaltos de Butterworth para eliminar el drift
cutoff_frequency = 2.5  # Frecuencia de corte para el filtro pasaaltos (en Hz)
fs = 1 / dt  # Frecuencia de muestreo
ug_filtered1 = highpass_filter(ug_values, cutoff_frequency, fs)

# Graficar aceleración
plt.figure(figsize=(10, 6))
plt.plot(t, ug_filtered1, color='blue', linewidth=0.5, alpha=1)
plt.title('Aceleración de la Tierra vs. Tiempo')
plt.xlabel('Tiempo [s]')
plt.ylabel('Aceleración [m/s²]')
plt.grid(alpha=0.25)
plt.tight_layout()
plt.show()

#######################################################################################################################
#                                                   #ACELEROMETRO#                                                    #
#######################################################################################################################
# Asumimos que la primera columna es la que contiene los datos de aceleración
df_x = df.iloc[:, 2]
ug = df_x.dropna()
ug_values = ug.values

# Definir el intervalo de tiempo
dt = 0.01
n = len(ug_values)
t = np.arange(0, dt * n, dt)

# Función para aplicar un filtro pasaaltos de Butterworth
def butter_highpass(cutoff, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='high', analog=False)
    return b, a

def highpass_filter(data, cutoff, fs, order=5):
    b, a = butter_highpass(cutoff, fs, order=order)
    y = filtfilt(b, a, data)
    return y

# Eliminar la media de la señal de aceleración
ug_mean = np.mean(ug_values)
ug_values -= ug_mean

# Ajustar frecuencia de corte
cutoff_frequency = 0.5  # Frecuencia de corte para el filtro pasaaltos (en Hz)
fs = 1 / dt  # Frecuencia de muestreo
ug_filtered = highpass_filter(ug_values, cutoff_frequency, fs)

# Integración para obtener la velocidad
velocity = scipy.integrate.cumtrapz(ug_filtered, t, initial=0)

# Otra aplicación de filtro para eliminar el drift en la velocidad
velocity_filtered = highpass_filter(velocity, cutoff_frequency, fs)

# Integración para obtener el desplazamiento
displacement = scipy.integrate.cumtrapz(velocity_filtered, t, initial=0)
# Calcular la densidad espectral de potencia (PSD)
frequencies, psd = welch(ug_filtered, fs=1/dt, nperseg=1024)

# Identificar la frecuencia dominante (frecuencia del pico más alto)
dominant_frequency = frequencies[np.argmax(psd)]

# Calcular el período natural correspondiente a la frecuencia dominante
natural_period = 1 / dominant_frequency

# Crear una figura y subplots para superponer gráficos
fig, axs = plt.subplots(3, 1, figsize=(10, 15))

# Graficar aceleración original y Newmark-Beta
axs[2].plot(t, ug_filtered, color='blue', linewidth=0.5, alpha=1, label='Aceleración Filtrada')
axs[2].set_title('Aceleración vs. Tiempo')
axs[2].set_xlabel('Tiempo [s]')
axs[2].set_ylabel('Aceleración [m/s²]')
axs[2].grid(alpha=0.25)
axs[2].legend()

# Graficar velocidad original y Newmark-Beta
axs[1].plot(t, velocity_filtered, color='red', linewidth=0.5, alpha=1, label='Velocidad Filtrada')
axs[1].set_title('Velocidad vs. Tiempo')
axs[1].set_xlabel('Tiempo [s]')
axs[1].set_ylabel('Velocidad [m/s]')
axs[1].grid(alpha=0.25)
axs[1].legend()

# Graficar desplazamiento original y Newmark-Beta
axs[0].plot(t, displacement, color='green', linewidth=0.5, alpha=1, label='Desplazamiento Filtrado')
axs[0].set_title('Desplazamiento vs. Tiempo')
axs[0].set_xlabel('Tiempo [s]')
axs[0].set_ylabel('Desplazamiento [m]')
axs[0].grid(alpha=0.25)
axs[0].legend()

plt.tight_layout()
plt.show()

#######################################################################################################################
#                                              PARÁMETROS DEL SISTEMA                                                 #
#######################################################################################################################
# Calcular y mostrar la PGA
pga_max = np.max(np.abs(ug_filtered))
pga_min = np.abs(np.min(ug_filtered))
print("Aceleración Máxima:", round(pga_max, 2), "m/s²")
print("Aceleración Mínima:", round(pga_min, 2), "m/s²")
print("Tiempo máximo para:", np.max(t))

# Mostrar los resultados máximos y mínimos
print("Desplazamiento máximo:", round(np.max(displacement), 4), "m")
print("Desplazamiento mínimo:", round(np.min(displacement), 4), "m")
print("Velocidad máxima:", round(np.max(velocity_filtered), 4), "m/s")
print("Velocidad mínima:", round(np.min(velocity_filtered), 4), "m/s")


# Datos proporcionados
m = 428 * 0.001  # masa en kg

# Calcular k
k = m / natural_period ** 2

# Calcular wn
wn = 2 * np.pi / natural_period

# Calcular c
ζ = 0.5  # factor de amortiguamiento
c = 2 * ζ * np.sqrt(m * k)
# Imprimir resultados
print("PARAMETROS DEL SISTEMA:")
print("Masa del sistema (M):", m, "kg")
print("Rigidez del sistema (k):", k, "kg/m")
print("Frecuencia natural (wn):", wn, "rad/s")
print("Coeficiente de amortiguación (c):", c, "kg/s")
print("Período natural:", natural_period, "s")
